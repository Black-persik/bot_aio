from fastapi import FastAPI, Request
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
import os

app = FastAPI()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Vercel
WEBHOOK_URL = os.getenv("WEBHOOK_URL")   # URL –≤–∞—à–µ–≥–æ Vercel –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

application = Application.builder().token(TOKEN).build()
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_keyboard = ReplyKeyboardMarkup(
    [["/ask", "/help"], ["/reload"], ["/log_in", "/log_out"]],
    resize_keyboard=True,
    one_time_keyboard=False,
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
application = Application.builder().token(TOKEN).build()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    print("‚ö° –ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞!")
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–µ—Ä–≤–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ –¥–ª—è –Ω–∞—à–µ–≥–æ —Å—É–ø–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã",
        reply_markup=main_keyboard,
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/ask - –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
        "/help - –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º\n"
        "/reload - –æ–±–Ω–æ–≤–∏—Ç—å —á–∞—Ç\n"
        "/log_out - –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞\n"
        "/log_in - –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç",
        reply_markup=main_keyboard,
    )


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text}")
    await update.message.reply_text(
        update.message.text,
        reply_markup=main_keyboard
    )

async def reload(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–ß–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!",
        reply_markup=main_keyboard
    )
async def log_in(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –±–æ—Ç–µ!",
        reply_markup=main_keyboard
    )
async def log_out(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞",
        reply_markup=main_keyboard
    )
async def ask(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã ask
    ask_keyboard = ReplyKeyboardMarkup(
        [["–û—Ç–º–µ–Ω–∞"]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await update.message.reply_text(
        "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å! –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å –≤–∞–º!",
        reply_markup=ask_keyboard
    )



# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_handlers():
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("reload", reload))
    application.add_handler(CommandHandler("ask", ask))
    application.add_handler(CommandHandler("log_out", log_out))
    application.add_handler(CommandHandler("log_in", log_in))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
register_handlers()
# Webhook —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è Telegram
@app.post("/webhook")
async def webhook(request: Request):
    try:
        if not application._initialized:
            print("‚ö†Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º application –≤—Ä—É—á–Ω—É—é (cold start)")
            await application.initialize()

        json_data = await request.json()
        print("üì° –ü–æ–ª—É—á–µ–Ω update:", json_data)
        update = Update.de_json(json_data, application.bot)
        await application.process_update(update)
        return {"status": "ok"}

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook:", str(e))
        return {"status": "error", "message": str(e)}

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
@app.get("/")
async def index():
    return {"message": "Bot is running"}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
@app.on_event("startup")
async def startup():
    await application.initialize()
    await application.bot.set_webhook(url=f"{WEBHOOK_URL}/webhook")

@app.on_event("shutdown")
async def on_shutdown():
    # —É–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –∏ —á–∏—Å—Ç–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
    await application.bot.delete_webhook()
    await application.shutdown()

@app.post("/webhook")
async def webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, application.bot)
    await application.process_update(update)
    return {"ok": True}

@app.get("/")
async def index():
    return {"message": "Bot is running"}
